name: Deploy Blog

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile --production=false

    - name: Build application
      run: yarn build

    - name: Set environment variables
      run: |
        echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> $GITHUB_ENV
        echo "DOCKER_TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "SERVER_HOST=${{ secrets.SERVER_HOST }}" >> $GITHUB_ENV
        echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> $GITHUB_ENV
        echo "SERVER_USER=${{ secrets.SERVER_USER }}" >> $GITHUB_ENV
        echo "CONTAINER_NAME=blog" >> $GITHUB_ENV
        echo "CONTAINER_PORT=3001" >> $GITHUB_ENV
        echo "HOST_PORT=3001" >> $GITHUB_ENV
        echo "HOST=0.0.0.0" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV
        echo "NEXT_TELEMETRY_DISABLED=1" >> $GITHUB_ENV
        echo "SKIP_DATABASE_CONNECTION=true" >> $GITHUB_ENV
        # Database Configuration
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        # Next Auth Configuration
        echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> $GITHUB_ENV
        echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> $GITHUB_ENV
        # Google OAuth Configuration
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
        # OpenAI Configuration
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
        # Cloudinary Configuration
        echo "CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}" >> $GITHUB_ENV
        # MCP API Configuration
        echo "MCP_API_TOKEN=${{ secrets.MCP_API_TOKEN }}" >> $GITHUB_ENV

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
        echo "Pushing Docker image..."
        docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        echo "✅ Docker image built and pushed successfully!"
        echo "Image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"

    - name: Test SSH connection
      run: |
        echo "Testing SSH connection to ${{ env.SERVER_HOST }}:${{ env.SERVER_PORT }}"
        timeout 30 ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} -p ${{ env.SERVER_PORT }} "echo 'SSH connection successful'" || {
          echo "⚠️ SSH connection failed. Manual deployment required."
          echo "Please run the following commands on your server:"
          echo "docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
          echo "docker stop blog || true"
          echo "docker rm blog || true"
          echo "docker run -d --name blog --restart unless-stopped -p 3001:3001 -e NODE_ENV=production ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
        }

    - name: Deploy to server
      if: success()
      run: |
        echo "Starting deployment..."
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} -p ${{ env.SERVER_PORT }} << 'EOF'
          echo "Starting deployment..."
          
          # Check if container exists and stop it
          echo "Checking existing container..."
          if docker ps -a --format "table {{.Names}}" | grep -q "blog"; then
            echo "Stopping existing container..."
            docker stop blog || echo "Failed to stop container"
            echo "Removing existing container..."
            docker rm blog || echo "Failed to remove container"
          else
            echo "No existing container found"
          fi
          
          # Pull latest image
          echo "Pulling latest image..."
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          
          # Run new container with detailed logging
          echo "Starting new container..."
          docker run -d \
            --name blog \
            --restart unless-stopped \
            -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
            -e NODE_ENV=${{ env.NODE_ENV }} \
            -e NEXT_TELEMETRY_DISABLED=${{ env.NEXT_TELEMETRY_DISABLED }} \
            -e DB_HOST=${{ env.DB_HOST }} \
            -e DB_PORT=${{ env.DB_PORT }} \
            -e DB_NAME=${{ env.DB_NAME }} \
            -e DB_USER=${{ env.DB_USER }} \
            -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
            -e NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }} \
            -e NEXTAUTH_URL=${{ env.NEXTAUTH_URL }} \
            -e GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }} \
            -e OPENAI_API_KEY=${{ env.OPENAI_API_KEY }} \
            -e CLOUDINARY_URL=${{ env.CLOUDINARY_URL }} \
            -e MCP_API_TOKEN=${{ env.MCP_API_TOKEN }} \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          
          # Check container status
          echo "Checking container status..."
          docker ps -a | grep blog
          
          # Check container logs
          echo "Container logs:"
          docker logs blog --tail 20
          
          echo "Deployment completed!"
        EOF

 